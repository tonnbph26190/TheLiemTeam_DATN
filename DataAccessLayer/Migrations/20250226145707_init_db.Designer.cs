// <auto-generated />
using System;
using DataAccessLayer.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250226145707_init_db")]
    partial class init_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entity.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictCounty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstAndLastName")
                        .HasColumnType("text");

                    b.Property<string>("Gmail")
                        .HasColumnType("text");

                    b.Property<string>("IDUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecificAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Brand", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gmail")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Cart", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IDUser")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            ID = "cf6ad2e4-5eb2-4be0-ac2d-cd2e1120f8c2",
                            IDUser = "133c77f1-5e7b-418b-baf1-fb5914652086",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CartOptions", b =>
                {
                    b.Property<Guid>("IDOptions")
                        .HasColumnType("uuid");

                    b.Property<string>("IDCart")
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("IDOptions", "IDCart");

                    b.HasIndex("IDCart");

                    b.ToTable("CartOptions");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Colors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("e634637e-7dbe-4348-8f0a-b0bb42e4a9f9"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2149),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2141),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2136),
                            Name = "White",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("02159e7c-74ee-4d24-9be6-dd0560ebc7bb"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2157),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2153),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2153),
                            Name = "Black",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("9b3dfe78-893f-4bc8-bed7-bd4b01e2e645"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2162),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2159),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2159),
                            Name = "Red",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("15efd369-c521-48ea-9b7a-bd7a5fd6f646"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2167),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2164),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2164),
                            Name = "Blue",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("a561744d-a0d2-486e-9ec1-569a1108a09f"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2190),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2169),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2169),
                            Name = "Green",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Images", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IDProductDetails")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("IDProductDetails");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Manufacturer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Material", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Options", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("IDColor")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDProductDetails")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDSize")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("IDColor");

                    b.HasIndex("IDProductDetails");

                    b.HasIndex("IDSize");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cotsts")
                        .HasColumnType("numeric");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDUser")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddressLine2")
                        .HasColumnType("text");

                    b.Property<int>("ShippingMethods")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("TrackingCheck")
                        .HasColumnType("boolean");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("IDOptions")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDOrder")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("IDOptions");

                    b.HasIndex("IDOrder");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillOfLadingCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangeDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditingHistory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IDOrder")
                        .HasColumnType("uuid");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("IDOrder");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.ProductDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IDBrand")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDCategory")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDManufacturers")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDMaterial")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IDProduct")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("IDBrand");

                    b.HasIndex("IDCategory");

                    b.HasIndex("IDManufacturers");

                    b.HasIndex("IDMaterial");

                    b.HasIndex("IDProduct");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Sizes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            ID = new Guid("16a1d279-2dde-4927-9c03-c48fde5953d8"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2456),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2450),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2449),
                            Name = "XS",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("adf9f379-fb44-4d0c-be50-a6d684007b3e"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2463),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2459),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2458),
                            Name = "S",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("e71f21dc-4242-4342-bc0c-753c56f28191"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2468),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2465),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2465),
                            Name = "M",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("02a6db0c-2ba9-465d-b28d-31034efff1f0"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2473),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2471),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2470),
                            Name = "L",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("f82057af-4195-4792-9543-d7fbc764dd3a"),
                            CreateBy = "",
                            CreateDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2478),
                            DeleteDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2475),
                            Description = "",
                            ModifiedDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2475),
                            Name = "XL",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Voucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IsActive")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("ReducedValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VoucherUser", b =>
                {
                    b.Property<string>("IDUser")
                        .HasColumnType("text");

                    b.Property<Guid>("IDVoucher")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("IDUser", "IDVoucher");

                    b.HasIndex("IDVoucher");

                    b.ToTable("VoucherUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "IDRole_Admin_key_112233",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "IDRole_Client_key_331122",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "IDRole_Staff_key_223311",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "133c77f1-5e7b-418b-baf1-fb5914652086",
                            RoleId = "IDRole_Admin_key_112233"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstAndLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "133c77f1-5e7b-418b-baf1-fb5914652086",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab312719-de2e-49ac-bc3e-58199d937dc6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENGMGTXX4FopzhNcQjIUVXHie+xQVFjYm1yuV/RkPHwn8q0k6deAQxB9EHA+BDMIuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9954111-dbf6-4876-bed6-078efb3e58f4",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            DateOfBirth = new DateTime(1989, 12, 31, 17, 0, 0, 0, DateTimeKind.Utc),
                            FirstAndLastName = "Admin",
                            Gender = 1,
                            JoinDate = new DateTime(2025, 2, 26, 14, 57, 7, 247, DateTimeKind.Utc).AddTicks(2691),
                            Status = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Address", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Addresss")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Cart", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.ApplicationUser", "ApplicationUsers")
                        .WithOne("Cart")
                        .HasForeignKey("DataAccessLayer.Entity.Cart", "IDUser")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CartOptions", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Cart", "Cart")
                        .WithMany("CartOptions")
                        .HasForeignKey("IDCart")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Options", "Options")
                        .WithMany("CartOptions")
                        .HasForeignKey("IDOptions")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Images", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.ProductDetails", "ProductDetails")
                        .WithMany("Images")
                        .HasForeignKey("IDProductDetails")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Options", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Colors", "Colors")
                        .WithMany("Options")
                        .HasForeignKey("IDColor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.ProductDetails", "ProductDetails")
                        .WithMany("Options")
                        .HasForeignKey("IDProductDetails")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Sizes", "Sizes")
                        .WithMany("Options")
                        .HasForeignKey("IDSize")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Colors");

                    b.Navigation("ProductDetails");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderDetails", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Options", "Options")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IDOptions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Options");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderHistory", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Order", "Order")
                        .WithMany("OrderHistory")
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.ProductDetails", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Brand", "Brand")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IDBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Category", "Category")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IDCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Manufacturer", "Manufacturers")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IDManufacturers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Material", "Material")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IDMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Product", "Products")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Manufacturers");

                    b.Navigation("Material");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VoucherUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("VoucherUser")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Voucher", "Voucher")
                        .WithMany("VoucherUser")
                        .HasForeignKey("IDVoucher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Brand", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Cart", b =>
                {
                    b.Navigation("CartOptions");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Category", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Colors", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Manufacturer", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Material", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Options", b =>
                {
                    b.Navigation("CartOptions");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderHistory");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.ProductDetails", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Sizes", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Voucher", b =>
                {
                    b.Navigation("VoucherUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Addresss");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("VoucherUser");
                });
#pragma warning restore 612, 618
        }
    }
}
